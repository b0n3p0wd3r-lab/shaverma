import os
import asyncio
from pathlib import Path

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo,
    LabeledPrice, PreCheckoutQuery, SuccessfulPayment, CallbackQuery
)
from dotenv import load_dotenv, find_dotenv
from user_data import user_manager


# Load .env from current dir or project root
_ = load_dotenv(find_dotenv(usecwd=True)) or load_dotenv(dotenv_path=Path(__file__).with_name('.env'))

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
WEBAPP_URL = os.getenv("WEBAPP_URL", "")  # e.g. https://your-domain.example
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN", "")  # –¢–æ–∫–µ–Ω –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞

# –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∫—É–ø–∫–∏ –º–æ–Ω–µ—Ç (—Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç)
COIN_PACKAGES = [
    {"price": 50, "coins": 100, "title": "–°—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç"},
    {"price": 100, "coins": 250, "title": "–ë–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç"},
    {"price": 250, "coins": 650, "title": "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–∞–∫–µ—Ç"},
    {"price": 500, "coins": 1400, "title": "–í—ã–≥–æ–¥–Ω—ã–π –ø–∞–∫–µ—Ç"},
    {"price": 1000, "coins": 3000, "title": "–ü—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç"},
    {"price": 2000, "coins": 6500, "title": "VIP –ø–∞–∫–µ—Ç"}
]


if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set. Export BOT_TOKEN env var with your bot token from @BotFather.")

if not WEBAPP_URL:
    # Not critical for start, but warn
    print("[WARN] WEBAPP_URL is not set. Set WEBAPP_URL to your deployed site to enable the WebApp button.")


async def on_start_command(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
                    web_app=WebAppInfo(url=WEBAPP_URL) if WEBAPP_URL else None,
                    url=WEBAPP_URL if not WEBAPP_URL else None,
                )
            ],
            [
                InlineKeyboardButton(
                    text="üí∞ –ö—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã",
                    callback_data="buy_coins"
                )
            ]
        ]
    )

    text = (
        "üçñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Shaurmafia!</b>\n\n"
        "üéÆ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É\n"
        "üí∞ –ò–ª–∏ –∫—É–ø–∏ –º–æ–Ω–µ—Ç—ã –¥–ª—è –∏–≥—Ä—ã\n\n"
        "–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–∫—Ä–æ–π: " + (WEBAPP_URL or "<–Ω–µ –∑–∞–¥–∞–Ω WEBAPP_URL>")
    )

    await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)


async def show_coin_packages(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∫—É–ø–∫–∏ –º–æ–Ω–µ—Ç"""
    keyboard_rows = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞ (–ø–æ 2 –≤ —Ä—è–¥—É)
    for i in range(0, len(COIN_PACKAGES), 2):
        row = []
        for j in range(2):
            if i + j < len(COIN_PACKAGES):
                package = COIN_PACKAGES[i + j]
                row.append(InlineKeyboardButton(
                    text=f"üíé {package['coins']} –º–æ–Ω–µ—Ç - {package['price']}‚ÇΩ",
                    callback_data=f"buy_{i + j}"
                ))
        keyboard_rows.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard_rows.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    
    text = (
        "üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –º–æ–Ω–µ—Ç:</b>\n\n"
        "üíé –ú–æ–Ω–µ—Ç—ã –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è –≤ –∏–≥—Ä–µ\n"
        "üéÅ –ß–µ–º –±–æ–ª—å—à–µ –ø–∞–∫–µ—Ç - —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ —Ü–µ–Ω–∞!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:"
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)


async def process_coin_purchase(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –º–æ–Ω–µ—Ç"""
    package_index = int(callback.data.split("_")[1])
    package = COIN_PACKAGES[package_index]
    
    if not PAYMENT_PROVIDER_TOKEN:
        await callback.answer(
            "‚ùå –ü–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            show_alert=True
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
    prices = [LabeledPrice(label=package["title"], amount=package["price"] * 100)]  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    
    await callback.message.answer_invoice(
        title=f"üíé {package['title']}",
        description=f"–ü–æ–∫—É–ø–∫–∞ {package['coins']} –∏–≥—Ä–æ–≤—ã—Ö –º–æ–Ω–µ—Ç –∑–∞ {package['price']}‚ÇΩ",
        payload=f"coins_{package['coins']}_{callback.from_user.id}",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="game_coins_purchase",
        photo_url="https://via.placeholder.com/400x300/FFD700/000000?text=üíé+–ú–æ–Ω–µ—Ç—ã",
        photo_width=400,
        photo_height=300,
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        send_phone_number_to_provider=False,
        send_email_to_provider=False,
        is_flexible=False
    )
    
    await callback.answer()


async def process_pre_checkout(pre_checkout_query: PreCheckoutQuery):
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞, –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç.–¥.
    
    payload_parts = pre_checkout_query.invoice_payload.split("_")
    if len(payload_parts) != 3 or payload_parts[0] != "coins":
        await pre_checkout_query.answer(
            ok=False,
            error_message="–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return
    
    coins_amount = payload_parts[1]
    user_id = payload_parts[2]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    if str(pre_checkout_query.from_user.id) != user_id:
        await pre_checkout_query.answer(
            ok=False,
            error_message="–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return
    
    # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    await pre_checkout_query.answer(ok=True)


async def process_successful_payment(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = message.successful_payment
    payload_parts = payment.invoice_payload.split("_")
    
    coins_amount = int(payload_parts[1])
    user_id = int(payload_parts[2])
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    new_balance = user_manager.add_coins(
        user_id=user_id, 
        amount=coins_amount, 
        transaction_id=payment.telegram_payment_charge_id
    )
    
    success_text = (
        f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
        f"üíé –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: <b>{coins_amount} –º–æ–Ω–µ—Ç</b>\n"
        f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{new_balance} –º–æ–Ω–µ—Ç</b>\n"
        f"üí≥ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: <b>{payment.total_amount // 100}‚ÇΩ</b>\n"
        f"üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: <code>{payment.telegram_payment_charge_id}</code>\n\n"
        f"üéÆ –ú–æ–Ω–µ—Ç—ã —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∏–≥—Ä–µ!"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É",
                    web_app=WebAppInfo(url=WEBAPP_URL) if WEBAPP_URL else None
                )
            ],
            [
                InlineKeyboardButton(
                    text="üí∞ –ö—É–ø–∏—Ç—å –µ—â–µ –º–æ–Ω–µ—Ç",
                    callback_data="buy_coins"
                )
            ]
        ]
    )
    
    await message.answer(success_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)


async def handle_back_to_start(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
                    web_app=WebAppInfo(url=WEBAPP_URL) if WEBAPP_URL else None,
                    url=WEBAPP_URL if not WEBAPP_URL else None,
                )
            ],
            [
                InlineKeyboardButton(
                    text="üí∞ –ö—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã",
                    callback_data="buy_coins"
                )
            ]
        ]
    )

    text = (
        "üçñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Shaurmafia!</b>\n\n"
        "üéÆ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É\n"
        "üí∞ –ò–ª–∏ –∫—É–ø–∏ –º–æ–Ω–µ—Ç—ã –¥–ª—è –∏–≥—Ä—ã\n\n"
        "–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–∫—Ä–æ–π: " + (WEBAPP_URL or "<–Ω–µ –∑–∞–¥–∞–Ω WEBAPP_URL>")
    )

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)


async def show_balance(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_info = user_manager.get_user_info(message.from_user.id)
    
    balance_text = (
        f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n"
        f"üíé –ú–æ–Ω–µ—Ç—ã: <b>{user_info['coins']}</b>\n"
        f"üõí –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: <b>{user_info['total_purchases']}</b>\n\n"
        f"üí° –ú–æ–Ω–µ—Ç—ã –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è –≤ –∏–≥—Ä–µ!"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É",
                    web_app=WebAppInfo(url=WEBAPP_URL) if WEBAPP_URL else None
                )
            ],
            [
                InlineKeyboardButton(
                    text="üí∞ –ö—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã",
                    callback_data="buy_coins"
                )
            ]
        ]
    )
    
    await message.answer(balance_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)


async def main() -> None:
    bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.message.register(on_start_command, F.text == "/start")
    dp.message.register(show_balance, F.text == "/balance")
    dp.message.register(process_successful_payment, F.successful_payment)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
    dp.callback_query.register(show_coin_packages, F.data == "buy_coins")
    dp.callback_query.register(handle_back_to_start, F.data == "back_to_start")
    dp.callback_query.register(process_coin_purchase, F.data.startswith("buy_"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    dp.pre_checkout_query.register(process_pre_checkout)

    print("ü§ñ Bot is starting‚Ä¶")
    print(f"üí∞ Payment provider token: {'‚úÖ Set' if PAYMENT_PROVIDER_TOKEN else '‚ùå Not set'}")
    print(f"üåê WebApp URL: {WEBAPP_URL or '‚ùå Not set'}")
    
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        pass


