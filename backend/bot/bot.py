import os
import asyncio
from pathlib import Path

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
)
from dotenv import load_dotenv, find_dotenv
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from db.database import DatabaseManager


# Load .env from current dir (bot folder) or project root
env_path = Path(__file__).parent / '.env'
_ = load_dotenv(env_path) or load_dotenv(find_dotenv(usecwd=True))

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
WEBAPP_URL = os.getenv("WEBAPP_URL", "")  # e.g. https://your-domain.example

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db_manager = DatabaseManager()


if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set. Export BOT_TOKEN env var with your bot token from @BotFather.")

if not WEBAPP_URL:
    # Not critical for start, but warn
    print("[WARN] WEBAPP_URL is not set. Set WEBAPP_URL to your deployed site to enable the WebApp button.")


async def on_start_command(message: Message):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    telegram_data = {
        "username": message.from_user.username or "",
        "first_name": message.from_user.first_name or "",
        "last_name": message.from_user.last_name or ""
    }
    db_manager.create_or_update_user(message.from_user.id, telegram_data)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    command_args = message.text.split(' ', 1)
    if len(command_args) > 1 and command_args[1].startswith('ref_'):
        try:
            referrer_id = int(command_args[1].replace('ref_', ''))
            db_manager.add_referral(referrer_id, message.from_user.id)
        except ValueError:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É",
                    web_app=WebAppInfo(url=WEBAPP_URL) if WEBAPP_URL else None,
                )
            ]
        ]
    )

    text = (
        "üçñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Shaurmafia!</b>\n\n"
        "üéÆ –ö–ª–∏–∫–∞–π –ø–æ —à–∞—É—Ä–º–µ, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç—ã –∏ –ø–æ–∫—É–ø–∞–π —É–ª—É—á—à–µ–Ω–∏—è!\n"
        "üí∞ –ü–æ–∫—É–ø–∫–∞ –º–æ–Ω–µ—Ç –∏ –≤–µ—Å—å –≥–µ–π–º–ø–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!"
    )

    if not WEBAPP_URL:
        text += f"\n\n‚ö†Ô∏è <i>WEBAPP_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</i>"

    await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)




async def show_balance(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_info = db_manager.get_user_profile(message.from_user.id)
    
    balance_text = (
        f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n"
        f"üíé –ú–æ–Ω–µ—Ç—ã: <b>{user_info['coins']}</b>\n"
        f"üî• –°–∏–ª–∞ –∫–ª–∏–∫–∞: <b>{user_info['click_power']}</b>\n"
        f"‚ö° –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: <b>{user_info['passive_income']}/—Å–µ–∫</b>\n"
        f"üõí –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: <b>{user_info['total_purchases']}</b>\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{user_info['referrals_count']}</b>\n\n"
        f"üéÆ –û—Ç–∫—Ä–æ–π –∏–≥—Ä—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–æ–Ω–µ—Ç –∏ —É–ª—É—á—à–µ–Ω–∏–π!"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É",
                    web_app=WebAppInfo(url=WEBAPP_URL) if WEBAPP_URL else None
                )
            ]
        ]
    )
    
    await message.answer(balance_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)


async def main() -> None:
    bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.message.register(on_start_command, F.text == "/start")
    dp.message.register(show_balance, F.text == "/balance")

    print("ü§ñ Bot is starting‚Ä¶")
    print(f"üåê WebApp URL: {WEBAPP_URL or '‚ùå Not set'}")
    print("üí° –ü–æ–∫—É–ø–∫–∞ –º–æ–Ω–µ—Ç –∏ –≤–µ—Å—å –≥–µ–π–º–ø–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        pass


